from types import NoneType
import discord
import typing
import datetime

class Guild():
    def active_threads() -> typing.List[discord.Thread]: ...    
    def audit_logs(limit: typing.Optional[int], before: discord.abc.SnowflakeTime, after: discord.abc.SnowflakeTime, oldest_first: bool, user: discord.abc.Snowflake, action: discord.AuditLogAction) -> typing.AsyncIterator[discord.AuditLogEntry]: ...    
    def ban(user: discord.abc.Snowflake, reason: typing.Optional[str], delete_message_days: int, delete_message_seconds: int) -> None: ...    
    def bans(limit: typing.Optional[int], before: discord.abc.Snowflake, after: discord.abc.Snowflake) -> typing.AsyncIterator[discord.BanEntry]: ...    
    def by_category() -> typing.List[discord.ByCategoryItem]: ...    
    def change_voice_state(channel: typing.Optional[discord.abc.Snowflake], self_mute: bool, self_deaf: bool) -> None: ...    
    def chunk(cache: bool) -> typing.List[discord.Member]: ...    
    def create_automod_rule(name: str, event_type: discord.AutoModRuleEventType, trigger: discord.AutoModTrigger, actions: typing.List[discord.AutoModRuleAction], enabled: bool, exempt_roles: typing.Sequence[discord.abc.Snowflake], exempt_channels: typing.Sequence[discord.abc.Snowflake], reason: str) -> discord.AutoModRule: ...    
    def create_category(name: str, overwrites: typing.Mapping[typing.Union[discord.Role, discord.Member], discord.PermissionOverwrite], reason: typing.Optional[str], position: int) -> discord.CategoryChannel: ...    
    def create_category_channel(name: str, overwrites: typing.Mapping[typing.Union[discord.Role, discord.Member], discord.PermissionOverwrite], reason: typing.Optional[str], position: int): ...    
    def create_custom_emoji(name: str, image: bytes, roles: typing.Collection[discord.Role], reason: typing.Optional[str]) -> discord.Emoji: ...    
    def create_forum(name: str, topic: str, position: int, category: typing.Optional[discord.CategoryChannel], slowmode_delay: int, nsfw: bool, overwrites: typing.Mapping[typing.Union[discord.Role, discord.Member], discord.PermissionOverwrite], reason: typing.Optional[str], default_auto_archive_duration: int, default_thread_slowmode_delay: int, default_sort_order: discord.ForumOrderType, default_reaction_emoji: discord.EmojiInputType, default_layout: discord.ForumLayoutType, available_tags: typing.Sequence[discord.ForumTag]) -> discord.ForumChannel: ...    
    def create_integration(type: discord.IntegrationType, id: int) -> None: ...    
    def create_role(name: str, permissions: discord.Permissions, color: typing.Union[discord.Colour, int], colour: typing.Union[discord.Colour, int], hoist: bool, display_icon: typing.Union[bytes, str], mentionable: bool, reason: typing.Optional[str]) -> discord.Role: ...    
    def create_scheduled_event(name: str, start_time: datetime.datetime, entity_type: discord.EntityType, privacy_level: discord.PrivacyLevel, channel: typing.Optional[discord.abc.Snowflake], location: str, end_time: datetime.datetime, description: str, image: bytes, reason: typing.Optional[str]) -> discord.ScheduledEvent: ...    
    def create_stage_channel(name: str, reason: typing.Optional[str], category: typing.Optional[discord.CategoryChannel], position: int, bitrate: int, user_limit: int, rtc_region: typing.Optional[str], video_quality_mode: discord.VideoQualityMode, overwrites: typing.Mapping[typing.Union[discord.Role, discord.Member], discord.PermissionOverwrite]) -> discord.StageChannel: ...    
    def create_sticker(name: str, description: str, emoji: str, file: discord.File, reason: typing.Optional[str]) -> discord.GuildSticker: ...    
    def create_template(name: str, description: str) -> discord.Template: ...    
    def create_text_channel(name: str, reason: typing.Optional[str], category: typing.Optional[discord.CategoryChannel], news: bool, position: int, topic: str, slowmode_delay: int, nsfw: bool, overwrites: typing.Mapping[typing.Union[discord.Role, discord.Member], discord.PermissionOverwrite], default_auto_archive_duration: int, default_thread_slowmode_delay: int) -> discord.TextChannel: ...    
    def create_voice_channel(name: str, reason: typing.Optional[str], category: typing.Optional[discord.CategoryChannel], position: int, bitrate: int, user_limit: int, rtc_region: typing.Optional[str], video_quality_mode: discord.VideoQualityMode, overwrites: typing.Mapping[typing.Union[discord.Role, discord.Member], discord.PermissionOverwrite]) -> discord.VoiceChannel: ...    
    def delete() -> None: ...    
    def delete_emoji(emoji: discord.abc.Snowflake, reason: typing.Optional[str]) -> None: ...    
    def delete_sticker(sticker: discord.abc.Snowflake, reason: typing.Optional[str]) -> None: ...    
    def edit(reason: typing.Optional[str], name: str, description: typing.Optional[str], icon: typing.Optional[bytes], banner: typing.Optional[bytes], splash: typing.Optional[bytes], discovery_splash: typing.Optional[bytes], community: bool, afk_channel: typing.Optional[discord.VoiceChannel], owner: discord.abc.Snowflake, afk_timeout: int, default_notifications: discord.NotificationLevel, verification_level: discord.VerificationLevel, explicit_content_filter: discord.ContentFilter, vanity_code: str, system_channel: typing.Optional[discord.TextChannel], system_channel_flags: discord.SystemChannelFlags, preferred_locale: discord.Locale, rules_channel: typing.Optional[discord.TextChannel], public_updates_channel: typing.Optional[discord.TextChannel], premium_progress_bar_enabled: bool, discoverable: bool, invites_disabled: bool, widget_enabled: bool, widget_channel: typing.Optional[discord.abc.Snowflake], mfa_level: discord.MFALevel, raid_alerts_disabled: bool, safety_alerts_channel: discord.TextChannel) -> discord.Guild: ...    
    def edit_role_positions(positions: typing.Mapping[discord.abc.Snowflake, int], reason: typing.Optional[str]) -> typing.List[discord.Role]: ...    
    def edit_welcome_screen(description: str, welcome_channels: typing.List[discord.WelcomeChannel], enabled: bool, reason: typing.Optional[str]) -> discord.WelcomeScreen: ...    
    def edit_widget(enabled: bool, channel: typing.Optional[discord.abc.Snowflake], reason: typing.Optional[str]) -> None: ...    
    def estimate_pruned_members(days: int, roles: typing.Collection[discord.abc.Snowflake]) -> typing.Optional[int]: ...    
    def fetch_automod_rule(automod_rule_id: int) -> discord.AutoModRule: ...    
    def fetch_automod_rules() -> typing.List[discord.AutoModRule]: ...    
    def fetch_ban(user: discord.abc.Snowflake) -> discord.BanEntry: ...    
    def fetch_channel(channel_id: int) -> typing.Union[discord.GuildChannel, discord.Thread]: ...    
    def fetch_channels() -> typing.Sequence[discord.GuildChannel]: ...    
    def fetch_emoji(emoji_id: int) -> discord.Emoji: ...    
    def fetch_emojis() -> typing.List[discord.Emoji]: ...    
    def fetch_member(member_id: int) -> discord.Member: ...    
    def fetch_members(limit: typing.Optional[int], after: discord.abc.SnowflakeTime) -> typing.AsyncIterator[discord.Member]: ...    
    def fetch_roles() -> typing.List[discord.Role]: ...    
    def fetch_scheduled_event(scheduled_event_id: int, with_counts: bool) -> discord.ScheduledEvent: ...    
    def fetch_scheduled_events(with_counts: bool) -> typing.List[discord.ScheduledEvent]: ...    
    def fetch_sticker(sticker_id: int) -> discord.GuildSticker: ...    
    def fetch_stickers() -> typing.List[discord.GuildSticker]: ...    
    def get_channel(channel_id: int) -> typing.Optional[discord.GuildChannel]: ...    
    def get_channel_or_thread(channel_id: int) -> typing.Optional[typing.Union[discord.Thread, discord.GuildChannel]]: ...    
    def get_emoji(emoji_id: int) -> typing.Optional[discord.Emoji]: ...    
    def get_member(user_id: int) -> typing.Optional[discord.Member]: ...    
    def get_member_named(name: str) -> typing.Optional[discord.Member]: ...    
    def get_role(role_id: int) -> typing.Optional[discord.Role]: ...    
    def get_scheduled_event(scheduled_event_id: int) -> typing.Optional[discord.ScheduledEvent]: ...    
    def get_stage_instance(stage_instance_id: int) -> typing.Optional[discord.StageInstance]: ...    
    def get_thread(thread_id: int) -> typing.Optional[discord.Thread]: ...    
    def integrations() -> typing.List[discord.Integration]: ...    
    def invites() -> typing.List[discord.Invite]: ...    
    def kick(user: discord.abc.Snowflake, reason: typing.Optional[str]) -> None: ...    
    def leave() -> None: ...    
    def prune_members(days: int, compute_prune_count: bool, roles: typing.Collection[discord.abc.Snowflake], reason: typing.Optional[str]) -> typing.Optional[int]: ...    
    def query_members(query: typing.Optional[str], limit: int, user_ids: typing.Optional[typing.List[int]], presences: bool, cache: bool) -> typing.List[discord.Member]: ...    
    def templates() -> typing.List[discord.Template]: ...    
    def unban(user: discord.abc.Snowflake, reason: typing.Optional[str]) -> None: ...    
    def vanity_invite() -> typing.Optional[discord.Invite]: ...    
    def webhooks() -> typing.List[discord.Webhook]: ...    
    def welcome_screen() -> discord.WelcomeScreen: ...    
    def widget() -> discord.Widget: ...

    afk_channel: NoneType    
    afk_timeout: int    
    approximate_member_count: NoneType    
    approximate_presence_count: NoneType    
    banner: NoneType    
    bitrate_limit: float    
    categories: typing.List    
    channels: typing.SequenceProxy    
    chunked: bool    
    created_at: datetime    
    default_notifications: discord._EnumValue_NotificationLevel    
    default_role: discord.Role    
    description: NoneType    
    discovery_splash: NoneType    
    emoji_limit: int    
    emojis: tuple    
    explicit_content_filter: discord._EnumValue_ContentFilter    
    features: typing.List    
    filesize_limit: int    
    forums: typing.List    
    icon: NoneType    
    id: int    
    large: bool    
    max_members: int    
    max_presences: NoneType    
    max_stage_video_users: int    
    max_video_channel_users: int    
    me: discord.Member    
    member_count: int    
    members: typing.SequenceProxy    
    mfa_level: discord._EnumValue_MFALevel    
    name: str    
    nsfw_level: discord._EnumValue_NSFWLevel    
    owner: discord.Member    
    owner_id: int    
    preferred_locale: discord._EnumValue_Locale    
    premium_progress_bar_enabled: bool    
    premium_subscriber_role: NoneType    
    premium_subscribers: typing.List    
    premium_subscription_count: int    
    premium_tier: int    
    public_updates_channel: NoneType    
    roles: typing.SequenceProxy    
    rules_channel: NoneType    
    safety_alerts_channel: NoneType    
    scheduled_events: typing.SequenceProxy    
    self_role: discord.Role    
    shard_id: int    
    splash: NoneType    
    stage_channels: typing.List    
    stage_instances: typing.SequenceProxy    
    sticker_limit: int    
    stickers: tuple    
    system_channel: discord.TextChannel    
    system_channel_flags: discord.SystemChannelFlags    
    text_channels: typing.List    
    threads: typing.SequenceProxy    
    unavailable: bool    
    vanity_url: NoneType    
    vanity_url_code: NoneType    
    verification_level: discord._EnumValue_VerificationLevel    
    voice_channels: typing.List    
    voice_client: NoneType    
    widget_channel: NoneType    
    widget_enabled: bool

    def __init__(
        self,
        guild: discord.Guild,
        custom_voice_entry: typing.Optional[discord.VoiceChannel] = None,
    ):
        """Construct a Guild object from a discord.Guild.

        Args:
            guild (discord.Guild): The discord.Guild to construct from.
            custom_voice_entery (typing.Optional[discord.VoiceChannel], typing.Optional): The custom voice channel. Defaults to None.

        Returns:
            Guild: The constructed Guild object.
        """
        for i in dir(guild):
            setattr(self, i, guild.__getattribute__(i))
        self.custom_voice_entry = custom_voice_entry
